1. Redux
------------------------------------
定義
・UIのstateをグローバルに管理するFW
・少量のstate管理はpropsの受け渡しで実現可。だが、開発規模が大きくなると管理が煩雑化し、保守性が低下する → Redux, useContextを使用した管理が有効

■原則
➀ Single source of truth
アプリケーション全体のstateはツリーの形で1つのオブジェクトで作られ、'1つのストア'に保存される
→ Storeは必ず1つ

➁ State is read-only
状態を変更する手段は、変更内容を保持するActionオブジェクトの発行・実行のみ
→ ビューやコールバックが状態を直接変更することはない

➂ Mutations are written as pure functions
「Reducer」は状態とアクションを受けて、新しい状態を返す関数で、アクションの状態変更に関する責務はReducerのみが持つ
→ 現在のStateオブジェクトは変更せず、'新しい'Stateオブジェクトを作って返す

■構成要素
・View: ユーザーの画面
・ActionCreator: アクション生成
・Action: ユーザーの入力したアクション
・Middleware: 副作用がある場合取り込む
  e.g.ボタンクリックの際サーバーのAPI叩く処理
・Reducer: 唯一状態を書き換えられる
・State: 現在の状態
・Store: 状態を保存する場所
・Slice: reducer + actionの集合体(name, initialState, reducersを含む)
・Dispatch: Storeに向けてActionを運ぶ

・Redux Toolkit: 
  Reduxを用いた開発を効率的に行うためのツールキット
→ コードの総量削減が可能 = 可読性の向上
→ TypeScriptとの相性が良い
→ 機能ごとにState, Reducerを内包するSliceで切り分ける
→ Stateのimmutable性を意識しなくて良い → 直接変更する形式で記載可

・configureStore(): 
  Storeを作成する関数
→ storeには、stateの状態を管理する目的で、reducerプロパティを持つsliceを設定する。

・createSlice(): 
  reducerとActionCreatorの機能を持つオブジェクトを生成する関数
→ createSliceで生成したオブジェクトをSliceと呼ぶ。

・action.payload: 
  ユーザーによる何らかのトリガーによって、actionがdispatchされる
  actionはオブジェクトであり、例えば以下のようなプロパティを含む。

  {
  type: 'SOME_ACTION_TYPE',
  payload: /* 格納データの内容 */,
  }

  e.g. ユーザーログイン時、ログイン情報(ユーザー名, id, 編集時間...)は、
  action.payloadに格納され、そのデータでstateの更新が可能になる

・useReducer: useStateと同じく、stateの管理を行うhooks
 https://takayamato.com/react-usereducer/
 https://www.youtube.com/watch?v=uuAdVs7sbAs&t=1466s

・useDispatch: Reduxストアからディスパッチャー関数 (dispatch 関数)を取得するために使用
・useSelector: Reduxストアからステートを選択するために使用

■処理手順(入力 ~ 描画)
1. : ユーザーやアプリケーションのトリガーに応じて(onclickやonchange等)Actionがdispatchされる
※ Actionは必要な情報を含むオブジェクト
※ API CALL等同時並行で処理が必要な場合、middleWareを使用する
2. ActionはReducerに渡される
3. Reducerは受け取ったAction & Stateに応じて、新しいstateを生成してStoreに返す(上書き & 保存)
4. 更新されたStateがViewに描画・反映される

■注意
Reduxストア（またはGlobal State）の更新と、
コンポーネントのローカル状態(useStateで更新されるstate)は異なる概念。混同しない


2. 今回の実装における処理の流れ
------------------------------------
-- フロントエンド実装 --
➀ 実装
➁ ログイン状態の管理
・useDispatch, useSelectorを使用。型定義（の上、カスタムフックとして定義）
・useSelectorで選択するuserステートの状態に応じて、ログイン画面の表示を制御
・その上で、ログインをsliceのAction Creator(login, logout), FirebaseのonAuthChangedで実現

-- バックエンド実装 --
★ ユーザーの状態をグローバルに管理できる仕組みを実現したい
➀ Firebase初期化
→ 認証情報: auth: getAuth()
→ DB情報: Firestore: getFirestore()
→ Google認証: provider: GoogleAuthProvider()

➁ redux-toolkitで、stateをグローバルに管理
1. createSlice()でslice生成
2. slice内のReducer, Action Creatorをexportし、configureStore()に渡し、Storeを生成
3. 型定義
4. layout.tsxに、以下手順でstateグローバル管理が可能
  ・<Provider></Provider>でchildren(ページ全体)を囲む
  ・store={store}として、2で生成したstoreを指定する  

➂ providerを使用し、Googleのログイン機能実装
→ signInWithPopup(auth, provider)で実現
→ Reduxを活用し、'ログイン状態'というActionをStoreにdispatch, state更新する仕組み実現
→ ログアウト機能も同要領で実現

★ Firestoreからデータを取得/出力したい
➀ データ取得
→ query(collection(db, "COLLECTION NAME"))でデータ取得
  ※ OnSnapShot()でリアルタイムに取得
  ※ 非同期処理の為useEffectで管理

➁ データ出力
→ query × OnSnapShotで取得したデータを、useStateの状態関数に代入し、mapで出力

➂ リファクタリング
→ 複数回繰り返される処理はカスタムフックで纏める


3. 学び/気づき
------------------------------------
・git commitのメッセージは接頭辞を付与してもっと分かりやすく
  https://qiita.com/itosho/items/9565c6ad2ffc24c09364

・PR名と作業内容が一貫していないことがある(BackendというPRでフロントCSSの修正 等)